const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs').promises;
const path = require('path');

const OpenAIChatController = require('./chatgpt');
const { getImageAsBase64 } = require('./utils')

const app = express();
app.use(bodyParser.json({ limit: '50mb' }));

app.post('/gpt-4v', async (req, res) => {
    let controller;
    try {
        const { image, prompt } = req.body;

        if (!prompt) {
            return res.status(400).send('Prompt text is required.');
        }

        controller = new OpenAIChatController();
        await controller.initialize();

        if (image) { 
            const base64Data = image.replace(/^data:image\/png;base64,/, "");
            await fs.writeFile("out.png", base64Data, 'base64'); 
            await controller.uploadImage('out.png');
            await controller.page.waitForTimeout(3000);
        }

        await controller.typeIntoPrompt(prompt);
        await controller.page.waitForTimeout(3000);
        await controller.clickSendButton();
        await controller.page.waitForTimeout(1000);

        const output = await new Promise((resolve, reject) => {
            controller.on('end_turn', (response) => {
                console.log('Received response:', response);
                resolve(response);
            });
        });

        res.json({ output });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).send(error);
    } finally {
        if (controller) {
            await controller.close(); // close pupeteer session
        }
    }
});

app.post('/dall-e3', async (req, res) => {
    let controller;
    try {
        const { prompt } = req.body;
        if (!prompt) {
            return res.status(400).send('Prompt text is required.');
        }

        controller = new OpenAIChatController();
        await controller.initialize();

        await controller.page.goto('https://chat.openai.com/?model=gpt-4-dalle', {waituntil: 'networkidle0'});

        // add a time sleep of 5 seconds 
        await controller.page.waitForTimeout(3000);

        await controller.typeIntoPrompt(prompt);
        await controller.clickSendButton();

        await controller.page.waitForFunction(
            () => {
              // Check for the presence of images with a specific attribute or identifier
              const images = document.querySelectorAll('img[alt="Generated by DALL·E"]');
              return images.length > 0;
            },
            { polling: 'raf', timeout: 100000} 
        );

        await controller.page.waitForTimeout(2000);
        
        const imageUrls = await controller.page.evaluate(() => {
            const images = Array.from(document.querySelectorAll('img[alt="Generated by DALL·E"]'));
            console.log('length of images arr')
            console.log(images.length)
            return images.map(img => img.src);
        });

        const imagesBase64 = [];
        for (let url of imageUrls) {
            const imageBase64 = await getImageAsBase64(url);
            imagesBase64.push(imageBase64);
        }

        res.json({ images: imagesBase64 });

    } catch (error) {
        console.error('Error:', error);
        res.status(500).send(error);
    } finally {
        if (controller) {
            await controller.close();
        }
    }
});


const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}.`);
});